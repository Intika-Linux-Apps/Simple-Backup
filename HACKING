*****************************
How to hack on Simple Backup
*****************************

Style guide
-----------

When writing code for SBackup please follow the style guide for Python code,
PEP 8. See http://www.python.org/dev/peps/pep-0008/.

Tools to ease you writing good style code are:

Eclipse IDE
Pydev
Pylint - checks the code style, imports, unused variables etc.


Summary of style guide
----------------------

* Use 4 spaces per indentation level.
* Never mix tabs and spaces.
* Use spaces instead of tabs (set this in your IDE). 
* Limit line length to 80-120 characters.
* Modules should have short, all-lowercase names.  Underscores can be used
  in the module name if it improves readability.
* Function names, method names and instance variables should be lowercase, with
  words separated by underscores as necessary to improve readability.
* Top level functions and classes are separated by 2 lines, method definitions
  within classes by a single line


How to run from source code
---------------------------

Attention: For the current version, it is not recommended to install
Simple Backup for productive use and to code on it beside at the same time.

The reason is that there are 2 packages for import in
that case, it might occur name conflicts: in your development environment and
in the Python site-packages directory.

If you know what you are doing you can run development code for testing
as follows:

1. Add your development directory to the Python path. Do this in a shell, so
   it does not affect the whole system! You can use the following commands:

	declare -x PYTHONPATH="/Path-to-development/sbackup/src:"$PYTHONPATH

2. Manually create a file `resources` with appropriate content based on the
   template file `resources.in` and place it in the package's top level
   directory (src/sbackup). This file is usually created during installation
   and therefore it is required to tweak it by hand for development.
 
3. Analogous to step 2) create a file `metainfo` with appropriate content based
   on the template file `metainfo.in` and place it in the package's top level
   directory (src/sbackup).
   
4. Go to the source directory to run the application you wish
	
	cd /Path-to-development/0.2/sripts
	python sbackup-config-gtk
	python sbackup-restore-gtk
	python sbackup
	
	
Translations
============

First, some links related to translations using Launchpad/Rosetta:

* http://blog.launchpad.net/general/trying-out-launchpad-translations
* https://help.launchpad.net/Translations/YourProject
* https://help.launchpad.net/Translations/YourProject/ImportingTranslations
* https://help.launchpad.net/Translations/YourProject/ImportPolicy
* https://help.launchpad.net/Translations/YourProject/Exports

